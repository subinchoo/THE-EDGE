/**
 * MIT License
 *
 * Copyright (c) 2017 Douglas Nassif Roma Junior
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React from 'react';
import { StyleProp, ViewStyle, TextStyle, ModalProps, ScrollViewProps } from 'react-native';
export declare type DialogPropsType = {
    children?: React.ReactNode | React.ReactNode[];
    contentStyle?: StyleProp<ViewStyle>;
    title?: string;
    titleStyle?: StyleProp<TextStyle>;
    buttons?: React.ReactNode | React.ReactNode[];
    buttonsStyle?: StyleProp<ViewStyle>;
    dialogStyle?: StyleProp<ViewStyle>;
    visible: boolean;
    animationType?: ModalProps['animationType'];
    onRequestClose: () => void;
    onShow?: () => void;
    onOrientationChange?: () => void;
    onTouchOutside?: () => void;
    overlayStyle?: StyleProp<ViewStyle>;
    supportedOrientations?: ModalProps['supportedOrientations'];
    statusBarTranslucent?: ModalProps['statusBarTranslucent'];
    keyboardDismissMode?: ScrollViewProps['keyboardDismissMode'];
    keyboardShouldPersistTaps?: ScrollViewProps['keyboardShouldPersistTaps'];
    contentInsetAdjustmentBehavior: ScrollViewProps['contentInsetAdjustmentBehavior'];
};
declare const Dialog: {
    ({ children, contentStyle, title, titleStyle, buttons, buttonsStyle, dialogStyle, visible, animationType, onRequestClose, onShow, onOrientationChange, onTouchOutside, overlayStyle, supportedOrientations, statusBarTranslucent, keyboardDismissMode, keyboardShouldPersistTaps, contentInsetAdjustmentBehavior, }: DialogPropsType): JSX.Element;
    defaultProps: {
        visible: boolean;
        onRequestClose: () => null;
        contentInsetAdjustmentBehavior: string;
    };
};
export default Dialog;
