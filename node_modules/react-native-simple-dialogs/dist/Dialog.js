"use strict";
/**
 * MIT License
 *
 * Copyright (c) 2017 Douglas Nassif Roma Junior
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const { OS } = react_native_1.Platform;
const Dialog = ({ children, contentStyle, title, titleStyle, buttons, buttonsStyle, dialogStyle, visible, animationType, onRequestClose, onShow, onOrientationChange, onTouchOutside, overlayStyle, supportedOrientations, statusBarTranslucent, keyboardDismissMode, keyboardShouldPersistTaps, contentInsetAdjustmentBehavior, }) => {
    const renderContent = () => {
        return (react_1.default.createElement(react_native_1.View, { style: [
                {
                    width: '100%',
                    flexShrink: 1,
                    padding: 24,
                    paddingTop: 20,
                },
                contentStyle,
            ] }, children));
    };
    const renderTitle = () => {
        const textAlign = OS === 'ios' ? 'center' : undefined;
        if (title) {
            return (react_1.default.createElement(react_native_1.Text, { style: [
                    {
                        textAlign,
                        color: '#000000DD',
                        fontSize: 20,
                        margin: 24,
                        marginBottom: 0,
                    },
                    titleStyle,
                ] }, title));
        }
    };
    const renderButtons = () => {
        const containerStyle = OS === 'ios'
            ? {}
            : {
                width: '100%',
                paddingLeft: 24,
                paddingRight: 8,
                paddingTop: 8,
                paddingBottom: 8,
            };
        if (buttons) {
            return react_1.default.createElement(react_native_1.View, { style: [containerStyle, buttonsStyle] }, buttons);
        }
    };
    const renderOutsideTouchable = () => {
        const view = react_1.default.createElement(react_native_1.View, { style: { flex: 1, width: '100%' } });
        if (!onTouchOutside) {
            return view;
        }
        return (react_1.default.createElement(react_native_1.TouchableWithoutFeedback, { onPress: onTouchOutside, style: { flex: 1, width: '100%' } }, view));
    };
    const dialogBackgroundColor = OS === 'ios' ? '#e8e8e8' : '#ffffff';
    const dialogBorderRadius = OS === 'ios' ? 5 : 1;
    return (react_1.default.createElement(react_native_1.Modal, { animationType: animationType, transparent: true, visible: visible, onRequestClose: onRequestClose, onShow: onShow, onOrientationChange: onOrientationChange, supportedOrientations: supportedOrientations, statusBarTranslucent: statusBarTranslucent },
        react_1.default.createElement(react_native_1.ScrollView, { bounces: false, style: {
                flex: 1,
            }, contentContainerStyle: {
                flex: 1,
            }, keyboardDismissMode: keyboardDismissMode, keyboardShouldPersistTaps: keyboardShouldPersistTaps, contentInsetAdjustmentBehavior: contentInsetAdjustmentBehavior },
            react_1.default.createElement(react_native_1.View, { style: [
                    {
                        flex: 1,
                        backgroundColor: '#000000AA',
                        padding: 24,
                    },
                    overlayStyle,
                ] },
                react_1.default.createElement(react_native_1.SafeAreaView, { style: { flex: 1 } },
                    renderOutsideTouchable(),
                    react_1.default.createElement(react_native_1.View, { style: [
                            {
                                backgroundColor: dialogBackgroundColor,
                                width: '100%',
                                maxHeight: '100%',
                                shadowOpacity: 0.24,
                                borderRadius: dialogBorderRadius,
                                elevation: 4,
                                shadowOffset: {
                                    height: 4,
                                    width: 2,
                                },
                            },
                            dialogStyle,
                        ] },
                        renderTitle(),
                        renderContent(),
                        renderButtons()),
                    renderOutsideTouchable())))));
};
Dialog.defaultProps = {
    visible: false,
    onRequestClose: () => null,
    contentInsetAdjustmentBehavior: 'never',
};
exports.default = Dialog;
//# sourceMappingURL=Dialog.js.map