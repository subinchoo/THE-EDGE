"use strict";
/**
 * MIT License
 *
 * Copyright (c) 2017 Douglas Nassif Roma Junior
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const Dialog_1 = __importDefault(require("./Dialog"));
const TouchableEffect_1 = __importDefault(require("./TouchableEffect"));
const { OS } = react_native_1.Platform;
const DEFAULT_COLOR_BUTTON = '#0000FF99';
const DEFAULT_BACKGROUND_COLOR_BUTTON = 'transparent';
const getButtonBackgroundColor = (buttonProps) => {
    const { style, disabled } = buttonProps;
    if (!style) {
        return DEFAULT_BACKGROUND_COLOR_BUTTON;
    }
    const { backgroundColor, backgroundColorDisabled } = react_native_1.StyleSheet.flatten(style);
    if (disabled) {
        return backgroundColorDisabled;
    }
    return backgroundColor;
};
const getButtonTextColor = (buttonProps) => {
    const { titleStyle, disabled } = buttonProps;
    if (!titleStyle) {
        return DEFAULT_COLOR_BUTTON;
    }
    const { color, colorDisabled } = react_native_1.StyleSheet.flatten(titleStyle);
    if (disabled) {
        return colorDisabled;
    }
    return color;
};
const getButtonStyle = (buttonProps) => {
    const { style } = buttonProps;
    const backgroundColor = getButtonBackgroundColor(buttonProps);
    const flattenStyle = react_native_1.StyleSheet.flatten(style);
    delete flattenStyle?.backgroundColorDisabled;
    return react_native_1.Platform.select({
        ios: [
            {
                height: 46,
                justifyContent: 'center',
            },
            flattenStyle,
            {
                backgroundColor,
            },
        ],
        android: [
            flattenStyle,
            {
                backgroundColor,
            },
        ],
    });
};
const getButtonTextStyle = (buttonProps, positive) => {
    const { style } = buttonProps;
    const color = getButtonTextColor(buttonProps);
    const flattenStyle = react_native_1.StyleSheet.flatten(style);
    delete flattenStyle?.backgroundColorDisabled;
    return react_native_1.Platform.select({
        ios: [
            {
                textAlign: 'center',
                textAlignVertical: 'center',
                color,
                fontWeight: positive ? 'bold' : 'normal',
            },
            { color },
            flattenStyle,
        ],
        android: [
            {
                height: 36,
                minWidth: 64,
                padding: 8,
                textAlign: 'center',
                textAlignVertical: 'center',
                color,
                fontWeight: 'bold',
                textTransform: 'uppercase',
            },
            { color },
            flattenStyle,
        ],
    });
};
const ConfirmDialog = ({ children, negativeButton, positiveButton, message, messageStyle, ...others }) => {
    const renderMessage = () => {
        if (!message) {
            return null;
        }
        const textAlign = OS === 'ios' ? 'center' : undefined;
        return (react_1.default.createElement(react_native_1.Text, { style: [{ textAlign, color: '#00000089', fontSize: 18 }, messageStyle] }, message));
    };
    const renderButton = (buttonProps, positive) => {
        if (!buttonProps) {
            return null;
        }
        const { onPress, disabled } = buttonProps;
        const containerStyle = getButtonStyle(buttonProps);
        const textStyle = getButtonTextStyle(buttonProps, positive);
        const touchableStyle = OS === 'ios' ? { flex: 1 } : {};
        return (react_1.default.createElement(TouchableEffect_1.default, { onPress: onPress, disabled: disabled, style: touchableStyle },
            react_1.default.createElement(react_native_1.View, { style: containerStyle },
                react_1.default.createElement(react_native_1.Text, { style: textStyle }, buttonProps.title))));
    };
    const renderButtons = () => {
        const containerStyle = OS === 'ios'
            ? { flexDirection: 'row' }
            : { flexDirection: 'row', justifyContent: 'flex-end', height: 36 };
        const dividerVertStyle = OS === 'ios'
            ? { width: negativeButton ? 1 : 0, backgroundColor: '#00000011' }
            : { width: 8 };
        const dividerHoriStyle = OS === 'ios' ? { height: 1, backgroundColor: '#00000011' } : { height: 0 };
        return (react_1.default.createElement(react_native_1.View, null,
            react_1.default.createElement(react_native_1.View, { style: dividerHoriStyle }),
            react_1.default.createElement(react_native_1.View, { style: containerStyle },
                renderButton(negativeButton, false),
                react_1.default.createElement(react_native_1.View, { style: dividerVertStyle }),
                renderButton(positiveButton, true))));
    };
    const renderContent = () => {
        if (children) {
            return children;
        }
        return renderMessage();
    };
    return (react_1.default.createElement(Dialog_1.default, { ...others, buttons: renderButtons() }, renderContent()));
};
ConfirmDialog.defaultProps = {
    ...Dialog_1.default.defaultProps,
};
exports.default = ConfirmDialog;
//# sourceMappingURL=ConfirmDialog.js.map